/******************************************************************************
 * Copyright (c) 2019, Simverge Software LLC. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following
 * conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
      this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name of Simverge Software LLC nor the names of its
 *    contributors may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************/

#include <stdbool.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <assert.h>


#include <pdal/pdalc.h>

#include "greatest.h"
#include "test_pdalc_utils.h"

/// A simple binary tree implementation for int values
struct node
{
    int key;
    struct node *left;
    struct node *right;
};

void dispose(struct node *n)
{
    if (n != NULL)
    {
        dispose(n->left);
        dispose(n->right);
        free(n);
    }
}

bool insert(int key, struct node **n)
{
    bool inserted = false;

    if (*n == NULL)
    {
        *n = (struct node *) malloc(sizeof(struct node));
        (*n)->key = key;
        (*n)->left = NULL;
        (*n)->right = NULL;
        inserted = true;
    }
    else if (key < (*n)->key)
    {
        inserted = insert(key, &(*n)->left);
    }
    else if (key > (*n)->key)
    {
        inserted = insert(key, &(*n)->right);
    }

    return inserted;
}

SUITE(test_pdalc_pointview);

static const int INVALID_POINT_VIEW_ID = 0;
static PDALPipelinePtr gPipeline = NULL;
static PDALPointViewIteratorPtr gPointViewIterator = NULL;

static void setup_test_pdalc_pointview(void *arg)
{
    gPipeline = PDALLoadPipeline("@CMAKE_BINARY_DIR@/data/simple-reproject.json");

    if (gPipeline)
    {
        gPointViewIterator = PDALGetPointViews(gPipeline);
    }
}

static void teardown_test_pdalc_pointview(void *arg)
{
    PDALDisposePointViewIterator(gPointViewIterator);
    PDALDisposePipeline(gPipeline);
}

TEST testPDALGetPointViewId(void)
{
    ASSERT_EQ(INVALID_POINT_VIEW_ID, PDALGetPointViewId(NULL));

    PDALResetPointViewIterator(gPointViewIterator);
    bool hasNext = PDALHasNextPointView(gPointViewIterator);
    ASSERT(hasNext);

    struct node *tree = NULL;

    while (hasNext)
    {
        // Use check with FAIL instead of assertions to avoid CWE-404
        // See http://cwe.mitre.org/data/definitions/404.html
        // See https://scan4.coverity.com/doc/en/cov_checker_ref.html#static_checker_RESOURCE_LEAK
        bool success = false;
        PDALPointViewPtr view = PDALGetNextPointView(gPointViewIterator);

        if (view)
        {
            int id = PDALGetPointViewId(view);

            // Make sure all IDs are valid
            success = (id != INVALID_POINT_VIEW_ID);

            // Make sure that there are no duplicate IDs
            success &= insert(id, &tree);
        }

        if (!success)
        {
            dispose(tree);
            PDALDisposePointView(view);
            FAILm("PDALGetNextPointView returned an invalid point view");
        }

        PDALDisposePointView(view);
        hasNext = PDALHasNextPointView(gPointViewIterator);
    }

    dispose(tree);

    PASS();
}

TEST testPDALGetPointViewSize(void)
{
    ASSERT_EQ(0, PDALGetPointViewSize(NULL));

    PDALResetPointViewIterator(gPointViewIterator);
    bool hasNext = PDALHasNextPointView(gPointViewIterator);
    ASSERT(hasNext);

    PDALPointViewPtr view = PDALGetNextPointView(gPointViewIterator);
    ASSERT(view);

    // Dispose view before assertion to avoid CWE-404
    // See http://cwe.mitre.org/data/definitions/404.html
    // See https://scan4.coverity.com/doc/en/cov_checker_ref.html#static_checker_RESOURCE_LEAK
    size_t size = PDALGetPointViewSize(view);
    PDALDisposePointView(view);
    ASSERT(size > 0);


    PASS();
}

TEST testPDALGetMeshSize(void)
{
    uint64_t size = PDALGetMeshSize(NULL);
    ASSERT(size == 0);

    PDALResetPointViewIterator(gPointViewIterator);
    bool hasNext = PDALHasNextPointView(gPointViewIterator);
    ASSERT(hasNext);

    PDALPointViewPtr view = PDALGetNextPointView(gPointViewIterator);
    ASSERT(view);

    // Dispose view before assertion to avoid CWE-404
    // See http://cwe.mitre.org/data/definitions/404.html
    // See https://scan4.coverity.com/doc/en/cov_checker_ref.html#static_checker_RESOURCE_LEAK
    size = PDALGetMeshSize(view);
    PDALDisposePointView(view);
    ASSERT(size == 2114);


    PASS();
}

TEST testPDALIsPointViewEmpty(void)
{
    ASSERT(PDALIsPointViewEmpty(NULL));

    PDALResetPointViewIterator(gPointViewIterator);
    bool hasNext = PDALHasNextPointView(gPointViewIterator);
    ASSERT(hasNext);

    PDALPointViewPtr view = PDALGetNextPointView(gPointViewIterator);
    ASSERT(view);

    // Dispose view before assertion to avoid CWE-404
    // See http://cwe.mitre.org/data/definitions/404.html
    // See https://scan4.coverity.com/doc/en/cov_checker_ref.html#static_checker_RESOURCE_LEAK
    bool isPointViewEmpty = PDALIsPointViewEmpty(view);
    PDALDisposePointView(view);
    ASSERT_FALSE(isPointViewEmpty);

    PASS();
}

TEST testPDALClonePointView(void)
{
    PDALResetPointViewIterator(gPointViewIterator);
    bool hasNext = PDALHasNextPointView(gPointViewIterator);
    ASSERT(hasNext);

    PDALPointViewPtr view = PDALGetNextPointView(gPointViewIterator);
    ASSERT(view);

    PDALPointLayoutPtr anotherView = PDALClonePointView(view);

    // Use check with FAIL instead of assertions to avoid CWE-404
    // See http://cwe.mitre.org/data/definitions/404.html
    // See https://scan4.coverity.com/doc/en/cov_checker_ref.html#static_checker_RESOURCE_LEAK

    if (!anotherView)
    {
        PDALDisposePointView(view);
        FAILm("PDALClonePointView returned a null view when given valid input");
    }

    if (view == anotherView)
    {
        PDALDisposePointView(view);
        PDALDisposePointView(anotherView);
        FAILm("PDALClonePointView returned a pointer to the same view instead of a clone");
    }

    if (PDALGetPointViewId(view) == PDALGetPointViewId(anotherView))
    {
        PDALDisposePointView(view);
        PDALDisposePointView(anotherView);
        FAILm("PDALClonePointView returned a view with the same ID as the input view");
    }

    size_t capacity = 1024;
    char expected[1024];
    char actual[1024];

    size_t expectedLength = PDALGetPointViewProj4(view, expected, capacity);

    if (expectedLength == 0 || expectedLength > capacity)
    {
        PDALDisposePointView(view);
        PDALDisposePointView(anotherView);
        FAILm("PDALGetPointViewProj4 returned a length of zero or greater than the provided buffer size");
    }

    if (expected[0] == '\0')
    {
        PDALDisposePointView(view);
        PDALDisposePointView(anotherView);
        FAILm("PDALGetPointViewProj4 returned a string whose first character is the null character");
    }

    size_t actualLength = PDALGetPointViewProj4(view, actual, capacity);

    if (expectedLength != actualLength || strncmp(expected, actual, expectedLength))
    {
        PDALDisposePointView(view);
        PDALDisposePointView(anotherView);
        FAILm("PDALGetPointViewProj4 for a cloned view returned a string that does not match the expected string");
    }

    expectedLength = PDALGetPointViewWkt(view, expected, capacity, false);

    if (expectedLength == 0 || expectedLength > capacity)
    {
        PDALDisposePointView(view);
        PDALDisposePointView(anotherView);
        FAILm("PDALGetPointViewWkt returned a length of zero or greater than the provided buffer size");
    }

    if (expected[0] == '\0')
    {
        PDALDisposePointView(view);
        PDALDisposePointView(anotherView);
        FAILm("PDALGetPointViewWkt returned a string whose first character is the null character");
    }

    actualLength = PDALGetPointViewWkt(view, actual, capacity, false);

    if (expectedLength != actualLength || strncmp(expected, actual, expectedLength))
    {
        PDALDisposePointView(view);
        PDALDisposePointView(anotherView);
        FAILm("PDALGetPointViewWkt for a cloned view returned a string that does not match the expected string");
    }

    expectedLength = PDALGetPointViewWkt(view, expected, capacity, true);

    if (expectedLength == 0 || expectedLength > capacity)
    {
        PDALDisposePointView(view);
        PDALDisposePointView(anotherView);
        FAILm("PDALGetPointViewWkt with enabled pretty-print option returned a length of zero or greater than the provided buffer size");
    }

    if (expected[0] == '\0')
    {
        PDALDisposePointView(view);
        PDALDisposePointView(anotherView);
        FAILm("PDALGetPointViewWkt with enabled pretty-print option returned a string whose first character is the null character");
    }

    actualLength = PDALGetPointViewWkt(view, actual, capacity, true);

    if (expectedLength != actualLength || strncmp(expected, actual, expectedLength))
    {
        PDALDisposePointView(view);
        PDALDisposePointView(anotherView);
        FAILm("PDALGetPointViewWkt with enabled pretty-print option for a cloned view returned a string that does not match the expected string");
    }

    PDALDisposePointView(anotherView);
    PDALDisposePointView(view);

    PASS();
}

TEST testPDALGetPointViewProj4(void)
{
    size_t capacity = 1024;
    char proj[1024];

    size_t size = PDALGetPointViewProj4(NULL, proj, capacity);
    ASSERT_EQ(0, size);
    ASSERT_EQ('\0', proj[0]);

    PDALResetPointViewIterator(gPointViewIterator);
    bool hasNext = PDALHasNextPointView(gPointViewIterator);
    ASSERT(hasNext);

    PDALPointViewPtr view = PDALGetNextPointView(gPointViewIterator);
    ASSERT(view);

    size = PDALGetPointViewProj4(view, NULL, capacity);

    // Use check with FAIL instead of assertions to avoid CWE-404
    // See http://cwe.mitre.org/data/definitions/404.html
    // See https://scan4.coverity.com/doc/en/cov_checker_ref.html#static_checker_RESOURCE_LEAK

    if (size != 0)
    {
        PDALDisposePointView(view);
        FAILm("PDALGetPointViewProj4 returned a non-zero size when given a null buffer");
    }

    size = PDALGetPointViewProj4(view, proj, 0);

    if (size != 0)
    {
        PDALDisposePointView(view);
        FAILm("PDALGetPointViewProj4 returned a non-zero size when given a buffer size of zero");
    }

    size = PDALGetPointViewProj4(view, proj, capacity);

    // Dispose the view before the final assertions, just in case the assertion fails
    PDALDisposePointView(view);

    ASSERT(size > 0 && size <= capacity);
    ASSERT_FALSE(proj[0] == '\0');
    ASSERT_STR_EQ("+proj=longlat +datum=WGS84 +no_defs", proj);

    PASS();
}

TEST testPDALGetPointViewWkt(void)
{
    size_t capacity = 1024;
    char wkt[1024];

    size_t size = PDALGetPointViewWkt(NULL, wkt, capacity, false);
    ASSERT_EQ(0, size);
    ASSERT_EQ('\0', wkt[0]);

    PDALResetPointViewIterator(gPointViewIterator);
    bool hasNext = PDALHasNextPointView(gPointViewIterator);
    ASSERT(hasNext);

    PDALPointViewPtr view = PDALGetNextPointView(gPointViewIterator);
    ASSERT(view);

    size = PDALGetPointViewWkt(view, NULL, capacity, false);

    // Use check with FAIL instead of assertions to avoid CWE-404
    // See http://cwe.mitre.org/data/definitions/404.html
    // See https://scan4.coverity.com/doc/en/cov_checker_ref.html#static_checker_RESOURCE_LEAK

    if (size != 0)
    {
        PDALDisposePointView(view);
        FAILm("PDALGetPointViewWkt returned a non-zero size when given a null buffer");
    }

    size = PDALGetPointViewWkt(view, wkt, 0, false);

    if (size != 0)
    {
        PDALDisposePointView(view);
        FAILm("PDALGetPointViewWkt returned a non-zero size when given a buffer size of zero");
    }

    size = PDALGetPointViewWkt(view, wkt, capacity, false);
    char *expectedWkt =
        "GEOGCS[\"WGS 84\","
        "DATUM[\"WGS_1984\","
        "SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],"
        "AUTHORITY[\"EPSG\",\"6326\"]"
        "],"
        "PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],"
        "UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],"
        "AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],"
        "AUTHORITY[\"EPSG\",\"4326\"]"
        "]";

    if (size == 0 || size > capacity)
    {
        PDALDisposePointView(view);
        FAILm("PDALGetPointViewWkt returned a length of zero or greater than the provided buffer size");
    }

    if (strncmp(expectedWkt, wkt, size) != 0)
    {
        PDALDisposePointView(view);
        FAILm("PDALGetPointViewWkt returned a string different than the expected string");
    }

    char prettyWkt[1024];
    size_t prettySize = PDALGetPointViewWkt(view, prettyWkt, capacity, true);

    // Dispose the view before the final assertions, just in case the assertion fails
    PDALDisposePointView(view);

    ASSERT(prettySize > 0 && prettySize <= capacity);
    ASSERT(size < prettySize);
    ASSERT(strcmp(wkt, prettyWkt) != 0);

    PASS();
}


TEST testPDALGetPointViewLayout(void)
{
    PDALPointLayoutPtr layout = PDALGetPointViewLayout(NULL);
    ASSERT_EQ(NULL, layout);

    PDALResetPointViewIterator(gPointViewIterator);
    bool hasNext = PDALHasNextPointView(gPointViewIterator);
    ASSERT(hasNext);

    PDALPointViewPtr view = PDALGetNextPointView(gPointViewIterator);
    ASSERT(view);

    layout = PDALGetPointViewLayout(view);

    // Dispose the view before the final assertion, just in case the assertion fails
    PDALDisposePointView(view);
    ASSERT(layout);

    PASS();
}

TEST testPDALGetPackedPoint(void)
{
    PDALResetPointViewIterator(gPointViewIterator);
    bool hasNext = PDALHasNextPointView(gPointViewIterator);
    ASSERT(hasNext);

    PDALPointViewPtr view = PDALGetNextPointView(gPointViewIterator);
    ASSERT(view);

    // Use check with FAIL instead of assertions to avoid CWE-404
    // See http://cwe.mitre.org/data/definitions/404.html
    // See https://scan4.coverity.com/doc/en/cov_checker_ref.html#static_checker_RESOURCE_LEAK

    uint64_t numPoints = PDALGetPointViewSize(view);

    if (numPoints == 0)
    {
        PDALDisposePointView(view);
        FAILm("PDALGetPointViewSize returned zero as the number of points in the view");
    }

    PDALPointLayoutPtr layout = PDALGetPointViewLayout(view);

    if (!layout)
    {
        PDALDisposePointView(view);
        FAILm("PDALGetPointViewLayout returned a null layout for a valid view");
    }

    size_t capacity = 512;
    char buffer[512];
    size_t layoutPointSize = PDALGetPointSize(layout);

    if (layoutPointSize == 0 || layoutPointSize > capacity)
    {
        PDALDisposePointView(view);
        FAILm("PDALGetPointSize returned point size of zero or that exceeds the maximum capacity");
    }

    PDALDimTypeListPtr dims = PDALGetPointLayoutDimTypes(layout);

    if (!dims)
    {
        PDALDisposePointView(view);
        FAILm("PDALGetPointLayoutDimTypes returned a null dim type list for a valid layout");
    }

    for (uint64_t i = 0; i < numPoints; ++i)
    {
        // Test PDALGetPackedPoint with all combinations of null and valid view, dims, and buffer
        // Only the call with all non-null values should return the expected packed point size

        for (unsigned j = 0; j < 8; ++j)
        {
            bool hasView = (j & 1) != 0;
            bool hasDims = (j & 2) != 0;
            bool hasBuffer = (j & 4) != 0;

            size_t expected = (hasView && hasDims && hasBuffer ? layoutPointSize : 0);
            size_t actual = PDALGetPackedPoint(
                                hasView ? view : NULL, hasDims ? dims : NULL, i, hasBuffer ? buffer : NULL);

            if (expected != actual)
            {
                PDALDisposeDimTypeList(dims);
                PDALDisposePointView(view);
                FAILm("PDALGetPackedPoint returned an unexpected packed point size");
            }
        }
    }

    PDALDisposeDimTypeList(dims);
    PDALDisposePointView(view);
    PASS();
}

TEST testPDALGetAllPackedPoints(void)
{
    PDALResetPointViewIterator(gPointViewIterator);
    bool hasNext = PDALHasNextPointView(gPointViewIterator);
    ASSERT(hasNext);

    PDALPointViewPtr view = PDALGetNextPointView(gPointViewIterator);
    ASSERT(view);

    uint64_t numPoints = PDALGetPointViewSize(view);

    if (numPoints == 0)
    {
        PDALDisposePointView(view);
        FAILm("PDALGetPointViewSize returned point size of zero for a valid view");
    }

    PDALPointLayoutPtr layout = PDALGetPointViewLayout(view);

    if (!layout)
    {
        PDALDisposePointView(view);
        FAILm("PDALGetPointViewLayout returned a null layout for a valid view");
    }

    size_t pointSize = PDALGetPointSize(layout);

    if (pointSize == 0)
    {
        PDALDisposePointView(view);
        FAILm("PDALGetPointSize returned point size of zero for a valid layout");
    }

    PDALDimTypeListPtr dims = PDALGetPointLayoutDimTypes(layout);

    if (!dims)
    {
        PDALDisposePointView(view);
        FAILm("PDALGetPointLayoutDimTypes returned a null dim type list for a valid layout");
    }

    if (pointSize != PDALGetDimTypeListByteCount(dims))
    {
        PDALDisposePointView(view);
        PDALDisposeDimTypeList(dims);
        FAILm("PDALGetDimTypeListByteCount returned byte count that does not match the value returned by PDALGetPointSize");
    }

    char *actualPoints = calloc(numPoints, pointSize);

    if (!actualPoints)
    {
        PDALDisposePointView(view);
        PDALDisposeDimTypeList(dims);
        FAILm("Could not allocate packed point list buffer");
    }

    // Test all invalid combinations that should return zero for PDALGetAllPackedPoints
    for (unsigned i = 0; i < 7; ++i)
    {
        bool hasView = (i & 1) != 0;
        bool hasDims = (i & 2) != 0;
        bool hasBuffer = (i & 4) != 0;

        size_t actual = PDALGetAllPackedPoints(hasView ? view : NULL, hasDims ? dims : NULL, hasBuffer ? actualPoints : NULL);

        if (actual != 0)
        {
            free(actualPoints);
            PDALDisposeDimTypeList(dims);
            PDALDisposePointView(view);

            FAILm("PDALGetAllPackedPoints returned a non-zero size when given a null view, a null dim type list, or a null packed point buffer");
        }
    }

    size_t actualSize = PDALGetAllPackedPoints(view, dims, actualPoints);

    if (actualSize != numPoints * pointSize)
    {
        free(actualPoints);
        PDALDisposeDimTypeList(dims);
        PDALDisposePointView(view);

        FAILm("PDALGetAllPackedPoints returned a non-size different than the expected size");
    }

    char *expectedPoint = calloc(1, pointSize);

    if (!expectedPoint)
    {
        free(actualPoints);
        PDALDisposeDimTypeList(dims);
        PDALDisposePointView(view);

        FAILm("Could not allocate buffer for expected packed point data");
    }

    for (uint64_t i = 0; i < numPoints; ++i)
    {
        bool success = (PDALGetPackedPoint(view, dims, i, expectedPoint) == pointSize);
        success &= (memcmp(expectedPoint, actualPoints + i * pointSize, pointSize) == 0);

        if (!success)
        {
            free(expectedPoint);
            free(actualPoints);
            PDALDisposeDimTypeList(dims);
            PDALDisposePointView(view);

            FAILm("PDALGetPackedPoint returned an unexpected size or unexpected data");
        }
    }

    free(expectedPoint);
    free(actualPoints);
    PDALDisposeDimTypeList(dims);
    PDALDisposePointView(view);

    PASS();
}

TEST testPDALGetAllTriangles(void)
{
    PDALResetPointViewIterator(gPointViewIterator);
    bool hasNext = PDALHasNextPointView(gPointViewIterator);
    ASSERT(hasNext);

    PDALPointViewPtr view = PDALGetNextPointView(gPointViewIterator);
    ASSERT(view);

    uint64_t numPoints = PDALGetMeshSize(view);

    if (numPoints == 0)
    {
        PDALDisposePointView(view);
        FAILm("PDALGetMeshSize returned tri size of zero for a valid view");
    }

    char *actualPoints = calloc(numPoints, 12);

    if (!actualPoints)
    {
        PDALDisposePointView(view);
        FAILm("Could not allocate packed point list buffer");
    }

    uint64_t actualSize = PDALGetAllTriangles(view, actualPoints);
    ASSERT_EQ(actualSize, 25368);

    free(actualPoints);
    PDALDisposePointView(view);
    PASS();
}

GREATEST_SUITE(test_pdalc_pointview)
{
    SET_SETUP(setup_test_pdalc_pointview, NULL);
    SET_TEARDOWN(teardown_test_pdalc_pointview, NULL);

    RUN_TEST(testPDALGetPointViewId);
    RUN_TEST(testPDALGetPointViewSize);
    RUN_TEST(testPDALGetMeshSize);
    RUN_TEST(testPDALIsPointViewEmpty);
    RUN_TEST(testPDALClonePointView);
    RUN_TEST(testPDALGetPointViewProj4);
    RUN_TEST(testPDALGetPointViewWkt);
    RUN_TEST(testPDALGetPointViewLayout);
    RUN_TEST(testPDALGetPackedPoint);
    RUN_TEST(testPDALGetAllPackedPoints);
    RUN_TEST(testPDALGetAllTriangles);

    SET_SETUP(NULL, NULL);
    SET_TEARDOWN(NULL, NULL);
}
/******************************************************************************
 * Copyright (c) 2019, Simverge Software LLC. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following
 * conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
      this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name of Simverge Software LLC nor the names of its
 *    contributors may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************/

// Required before including stdio.h to support secure scanf C functions
#if defined(__STDC_LIB_EXT1__)
#define __STDC_WANT_LIB_EXT1__ 1
#endif

#include <assert.h>
#include <stdio.h> // for sscanf and sscanf_s
#include <string.h> // for strncmp

#include <pdal/pdalc_pipeline.h>

#include "greatest.h"
#include "test_pdalc_utils.h"

SUITE(test_pdalc_pipeline);

static char *gPipelineJson = NULL;

static void setup_test_pdalc_pipeline(void *arg)
{
    gPipelineJson = PDALReadPipelineJson("@CMAKE_BINARY_DIR@/data/stats.json");
}

static void teardown_test_pdalc_pipeline(void *arg)
{
    if (gPipelineJson)
    {
        free(gPipelineJson);
    }
}

TEST testPDALCreateAndDisposePipeline(void)
{
    PDALPipelinePtr pipeline = PDALCreatePipeline(NULL);

    // Use check with FAIL instead of assertions to avoid CWE-404
    // See http://cwe.mitre.org/data/definitions/404.html
    // See https://scan4.coverity.com/doc/en/cov_checker_ref.html#static_checker_RESOURCE_LEAK

    if (pipeline)
    {
        PDALDisposePipeline(pipeline);
        pipeline = NULL;
        FAILm("PDALCreatePipeline returned a non-null pipeline when given a NULL argument");
    }

    pipeline = PDALCreatePipeline("");

    if (pipeline)
    {
        PDALDisposePipeline(pipeline);
        pipeline = NULL;
        FAILm("PDALCreatePipeline returned a non-null pipeline when given an empty string argument");
    }

    pipeline = PDALCreatePipeline("This is not a valid pipeline, it's not even JSON");

    if (pipeline)
    {
        PDALDisposePipeline(pipeline);
        pipeline = NULL;
        FAILm("PDALCreatePipeline returned a non-null pipeline when given a string argument with an invalid pipeline");
    }

    pipeline = PDALCreatePipeline(gPipelineJson);
    ASSERT(pipeline);

    PDALDisposePipeline(pipeline);
    PDALDisposePipeline(NULL);

    PASS();
}

TEST testPDALGetPipelineAsString(void)
{
    PDALPipelinePtr pipeline = PDALCreatePipeline(gPipelineJson);
    ASSERT(pipeline);

    int64_t count = PDALExecutePipeline(pipeline);

    if (count <= 0)
    {
        PDALDisposePipeline(pipeline);
        pipeline = NULL;
        FAILm("PDALExecutePipeline returned a non-positive point count for a valid pipeline");
    }

    char json[1024];
    size_t size = PDALGetPipelineAsString(pipeline, json, 1024);

    if (size == 0 || size > 1024)
    {
        PDALDisposePipeline(pipeline);
        pipeline = NULL;
        FAILm("PDALGetPipelineAsString returned a string size equal to zero or greater than the provided buffer size");
    }

    if (json[0] == '\0')
    {
        PDALDisposePipeline(pipeline);
        pipeline = NULL;
        FAILm("PDALGetPipelineAsString generated a JSON string whose first character is null");
    }

    // Make sure that the JSON object's name is "pipeline"
    char jsonName[16];
#if defined(__STDC_LIB_EXT1__)
    sscanf_s(json, "%*s\n\t%10s", jsonName, 16);
#else
    sscanf(json, "%*s\n\t%10s", jsonName);
#endif

    if (strncmp("\"pipeline\"", jsonName, 10) != 0)
    {
        PDALDisposePipeline(pipeline);
        pipeline = NULL;
        FAILm("PDALGetPipelineMetadata generated a JSON string whose object name is not \"pipeline\"");
    }

    char json10[10];
    size = PDALGetPipelineAsString(pipeline, json10, 10);

    if (size != 9)
    {
        PDALDisposePipeline(pipeline);
        pipeline = NULL;
        FAILm("PDALGetPipelineAsString truncation not working");
    }

    if (json[0] == '\0')
    {
        PDALDisposePipeline(pipeline);
        pipeline = NULL;
        FAILm("PDALGetPipelineAsString generated a JSON string whose first character is null");
    }

    PDALDisposePipeline(pipeline);
    PASS();
}

TEST testPDALGetPipelineMetadata(void)
{
    PDALPipelinePtr pipeline = PDALCreatePipeline(gPipelineJson);
    ASSERT(pipeline);

    int64_t count = PDALExecutePipeline(pipeline);

    // Use check with FAIL instead of assertions to avoid CWE-404
    // See http://cwe.mitre.org/data/definitions/404.html
    // See https://scan4.coverity.com/doc/en/cov_checker_ref.html#static_checker_RESOURCE_LEAK

    if (count <= 0)
    {
        PDALDisposePipeline(pipeline);
        pipeline = NULL;
        FAILm("PDALExecutePipeline returned a non-positive point count for a valid pipeline");
    }

    char json[1024];
    size_t size = PDALGetPipelineMetadata(pipeline, json, 1024);

    if (size == 0 || size > 1024)
    {
        PDALDisposePipeline(pipeline);
        pipeline = NULL;
        FAILm("PDALGetPipelineMetadata returned a string size equal to zero or greater than the provided buffer size");
    }

    if (json[0] == '\0')
    {
        PDALDisposePipeline(pipeline);
        pipeline = NULL;
        FAILm("PDALGetPipelineMetadata generated a JSON string whose first character is null");
    }

    // Make sure that the JSON object's name is "metadata"
    char jsonName[16];
#if defined(__STDC_LIB_EXT1__)
    sscanf_s(json, "%*s\n\t%10s", jsonName, 16);
#else
    sscanf(json, "%*s\n\t%10s", jsonName);
#endif

    if (strncmp("\"metadata\"", jsonName, 10) != 0)
    {
        PDALDisposePipeline(pipeline);
        pipeline = NULL;
        FAILm("PDALGetPipelineMetadata generated a JSON string whose object name is not \"schema\"");
    }

    char json10[10];
    size = PDALGetPipelineMetadata(pipeline, json10, 10);

    if (size != 9)
    {
        PDALDisposePipeline(pipeline);
        pipeline = NULL;
        FAILm("PDALGetPipelineMetadata truncation not working");
    }

    PDALDisposePipeline(pipeline);
    PASS();
}

TEST testPDALGetPipelineSchema(void)
{
    PDALPipelinePtr pipeline = PDALCreatePipeline(gPipelineJson);
    ASSERT(pipeline);

    int64_t count = PDALExecutePipeline(pipeline);

    // Use check with FAIL instead of assertions to avoid CWE-404
    // See http://cwe.mitre.org/data/definitions/404.html
    // See https://scan4.coverity.com/doc/en/cov_checker_ref.html#static_checker_RESOURCE_LEAK

    if (count <= 0)
    {
        PDALDisposePipeline(pipeline);
        pipeline = NULL;
        FAILm("PDALExecutePipeline returned a non-positive point count for a valid pipeline");
    }

    char json[2048];
    size_t size = PDALGetPipelineSchema(pipeline, json, 2048);

    if (size == 0 || size > 2048)
    {
        PDALDisposePipeline(pipeline);
        pipeline = NULL;
        FAILm("PDALGetPipelineSchema returned a string size equal to zero or greater than the provided buffer size");
    }

    if (json[0] == '\0')
    {
        PDALDisposePipeline(pipeline);
        pipeline = NULL;
        FAILm("PDALGetPipelineSchema generated a JSON string whose first character is null");
    }

    // Make sure that the JSON object's name is "schema"
    char jsonName[16];
#if defined(__STDC_LIB_EXT1__)
    sscanf_s(json, "%*s\n\t%10s", jsonName, 16);
#else
    sscanf(json, "%*s\n\t%10s", jsonName);
#endif

    if (strncmp("\"schema\"", jsonName, 8) != 0)
    {
        PDALDisposePipeline(pipeline);
        pipeline = NULL;
        FAILm("PDALGetPipelineSchema generated a JSON string whose object name is not \"schema\"");
    }

    char json10[10];
    size = PDALGetPipelineSchema(pipeline, json10, 10);

    if (size != 9)
    {
        PDALDisposePipeline(pipeline);
        pipeline = NULL;
        FAILm("PDALGetPipelineSchema truncation not working");
    }

    PDALDisposePipeline(pipeline);
    PASS();
}

TEST testPDALGetSetPipelineLog(void)
{
    PDALPipelinePtr pipeline = PDALCreatePipeline(gPipelineJson);
    ASSERT(pipeline);

    int64_t count = PDALExecutePipeline(pipeline);

    // Use check with FAIL instead of assertions to avoid CWE-404
    // See http://cwe.mitre.org/data/definitions/404.html
    // See https://scan4.coverity.com/doc/en/cov_checker_ref.html#static_checker_RESOURCE_LEAK

    if (count <= 0)
    {
        PDALDisposePipeline(pipeline);
        pipeline = NULL;
        FAILm("PDALExecutePipeline returned a non-positive point count for a valid pipeline");
    }

    // Test valid cases: 0 to 8
    char log[1024];

    for (int i = 0; i < 9; ++i)
    {
        PDALSetPipelineLogLevel(pipeline, i);

        if (i != PDALGetPipelineLogLevel(pipeline))
        {
            PDALDisposePipeline(pipeline);
            pipeline = NULL;
            FAILm("PDALGetPipelineLogLevel returned a number different than the immediately preceding PDALSetPipelineLogLevel call's argument");
        }
    }

    // TODO Determine why all levels yield empty logs
    size_t size = PDALGetPipelineLog(pipeline, log, 1024);

    //  if (size == 0 || size > 1024)
    //  {
    //      PDALDisposePipeline(pipeline);
    //      pipeline = NULL;
    //      FAILm("PDALGetPipelineLog returned a string size equal to zero or greater than the provided buffer size");
    //  }

    //  if (log[0] == '\0')
    //  {
    //      PDALDisposePipeline(pipeline);
    //      pipeline = NULL;
    //      FAILm("PDALGetPipelineLog generated a JSON string whose first character is null");
    //  }

    PDALDisposePipeline(pipeline);

    PASS();
}

TEST testPDALExecutePipeline(void)
{
    PDALPipelinePtr pipeline = PDALCreatePipeline(gPipelineJson);
    ASSERT(pipeline);

    int64_t count = PDALExecutePipeline(pipeline);

    // Use check with FAIL instead of assertions to avoid CWE-404
    // See http://cwe.mitre.org/data/definitions/404.html
    // See https://scan4.coverity.com/doc/en/cov_checker_ref.html#static_checker_RESOURCE_LEAK

    if (count <= 0)
    {
        PDALDisposePipeline(pipeline);
        pipeline = NULL;
        FAILm("PDALExecutePipeline returned a non-positive point count for a valid pipeline");
    }

    count = PDALExecutePipeline(NULL);

    if (count != 0)
    {
        PDALDisposePipeline(pipeline);
        pipeline = NULL;
        FAILm("PDALExecutePipeline returned a positive count for a null pipeline");
    }

    PDALDisposePipeline(pipeline);
    PASS();
}

TEST testPDALExecutePipelineStream(void)
{
    PDALPipelinePtr pipeline = PDALCreatePipeline(gPipelineJson);
    ASSERT(pipeline);

    bool isStreamable = PDALPipelineIsStreamable(pipeline);

    ASSERT_EQ(isStreamable, true);

    bool result = PDALExecutePipelineAsStream(pipeline);

    ASSERT_EQ(result, true);

    result = PDALExecutePipelineAsStream(NULL);

    ASSERT_EQ(result, false);

    isStreamable = PDALPipelineIsStreamable(NULL);

    ASSERT_EQ(isStreamable, false);

    PDALDisposePipeline(pipeline);
    PASS();
}

TEST testPDALValidatePipeline(void)
{
    bool valid = PDALValidatePipeline(NULL);
    ASSERT_FALSEm("PDALValidatePipeline returned true for a NULL pipeline argument", valid);

    PDALPipelinePtr pipeline = PDALCreatePipeline(gPipelineJson);
    ASSERT(pipeline);
    valid = PDALValidatePipeline(pipeline);
    PDALDisposePipeline(pipeline);

    if (!valid)
    {
        FAILm("PDALValidatePipeline returned false for a valid pipeline");
    }

    PASS();
}

GREATEST_SUITE(test_pdalc_pipeline)
{
    SET_SETUP(setup_test_pdalc_pipeline, NULL);
    SET_TEARDOWN(teardown_test_pdalc_pipeline, NULL);

    RUN_TEST(testPDALCreateAndDisposePipeline);
    RUN_TEST(testPDALExecutePipeline);
    RUN_TEST(testPDALExecutePipelineStream);
    RUN_TEST(testPDALGetSetPipelineLog);
    RUN_TEST(testPDALGetPipelineAsString);
    RUN_TEST(testPDALGetPipelineMetadata);
    RUN_TEST(testPDALGetPipelineSchema);
    RUN_TEST(testPDALValidatePipeline);

    SET_SETUP(NULL, NULL);
    SET_TEARDOWN(NULL, NULL);
}

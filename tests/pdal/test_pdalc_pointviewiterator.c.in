/******************************************************************************
 * Copyright (c) 2019, Simverge Software LLC. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following
 * conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
      this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name of Simverge Software LLC nor the names of its
 *    contributors may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************/

#include <assert.h>

#include <pdal/pdalc_pipeline.h>
#include <pdal/pdalc_pointview.h>
#include <pdal/pdalc_pointviewiterator.h>

#include "greatest.h"
#include "test_pdalc_utils.h"

SUITE(test_pdalc_pointviewiterator);

static PDALPipelinePtr gPipeline = NULL;
static PDALPointViewIteratorPtr gPointViewIterator = NULL;

static void setup_test_pdalc_pointviewiterator(void *arg)
{
    gPipeline = PDALLoadPipeline("@CMAKE_BINARY_DIR@/data/simple-reproject.json");

    if (gPipeline)
    {
        gPointViewIterator = PDALGetPointViews(gPipeline);
    }
}

static void teardown_test_pdalc_pointviewiterator(void *arg)
{
    PDALDisposePointViewIterator(gPointViewIterator);
    PDALDisposePipeline(gPipeline);
}

TEST testPDALHasNextPointView(void)
{
    bool hasNext = PDALHasNextPointView(NULL);
    ASSERT_FALSE(hasNext);

    ASSERT(gPointViewIterator);
    hasNext = PDALHasNextPointView(gPointViewIterator);
    ASSERT(hasNext);

    PASS();
}

TEST testPDALGetNextPointView(void)
{
    PDALPointViewPtr view = PDALGetNextPointView(NULL);
    ASSERT_EQ(NULL, view);

    ASSERT_FALSE(gPointViewIterator == NULL);
    PDALResetPointViewIterator(gPointViewIterator);
    bool hasNext = PDALHasNextPointView(gPointViewIterator);
    ASSERT(hasNext);

    view = PDALGetNextPointView(gPointViewIterator);
    ASSERT(view);

    if (PDALHasNextPointView(gPointViewIterator))
    {
        PDALPointViewPtr anotherView = PDALGetNextPointView(gPointViewIterator);

        if (!anotherView || anotherView == view)
        {
            PDALDisposePointView(view);
            view = NULL;
            FAILm("PDALGetNextPointView returned the same view as the first view");
        }

        PDALDisposePointView(anotherView);
    }

    PDALDisposePointView(view);
    PASS();
}

TEST testPDALResetPointViewIterator(void)
{
    ASSERT(gPointViewIterator);
    PDALResetPointViewIterator(gPointViewIterator);
    bool hasNext = PDALHasNextPointView(gPointViewIterator);
    ASSERT(hasNext);

    PDALPointViewPtr view = PDALGetNextPointView(gPointViewIterator);
    ASSERT(view);

    while (PDALHasNextPointView(gPointViewIterator))
    {
        PDALPointViewPtr anotherView = PDALGetNextPointView(gPointViewIterator);

        if (!anotherView || anotherView == view)
        {
            PDALDisposePointView(view);
            view = NULL;
            FAILm("PDALGetNextPointView returned the same view as the first view");
        }

        PDALDisposePointView(anotherView);
    }

    PDALDisposePointView(view);

    // The next view should be null since we reached the end of the point view iteration
    view = PDALGetNextPointView(gPointViewIterator);

    // Use check with FAIL instead of assertions to avoid CWE-404
    // See http://cwe.mitre.org/data/definitions/404.html
    // See https://scan4.coverity.com/doc/en/cov_checker_ref.html#static_checker_RESOURCE_LEAK

    if (view)
    {
        PDALDisposePointView(view);
        view = NULL;
        FAILm("PDALGetNextPointView returned a non-null view immediately after PDALHasNextPointView returned false");
    }

    // The next view should be non-null since we reset the point view iterator
    PDALResetPointViewIterator(gPointViewIterator);

    view = PDALGetNextPointView(gPointViewIterator);
    ASSERT(view);
    PDALDisposePointView(view);

    PASS();
}

GREATEST_SUITE(test_pdalc_pointviewiterator)
{
    SET_SETUP(setup_test_pdalc_pointviewiterator, NULL);
    SET_TEARDOWN(teardown_test_pdalc_pointviewiterator, NULL);

    RUN_TEST(testPDALHasNextPointView);
    RUN_TEST(testPDALGetNextPointView);
    RUN_TEST(testPDALResetPointViewIterator);

    SET_SETUP(NULL, NULL);
    SET_TEARDOWN(NULL, NULL);
}
